#!/usr/bin/env python
#
# brute force a given private key with single digit variations
# and compare to known address for match.
#
import sys, ecdsa, hashlib

priv_key_wif = "5JYRjeoR3E69Zx5Jr3RByy372bKp4z186swYfSLW43iivHrCt5e"  # testing for 5JYRieoR3E69Zx5Jr3RByy372bKp4z186swYfSLW43iivHrCt5e
target_addr = "165MdrCVNhHgBKckY5CNePqatLKjFmkZ7M"

# secp256k1, http://www.oid-info.com/get/1.3.132.0.10
_p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2FL
_r = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141L
_b = 0x0000000000000000000000000000000000000000000000000000000000000007L
_a = 0x0000000000000000000000000000000000000000000000000000000000000000L
_Gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798L
_Gy = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8L
curve_secp256k1 = ecdsa.ellipticcurve.CurveFp( _p, _a, _b )
generator_secp256k1 = ecdsa.ellipticcurve.Point( curve_secp256k1, _Gx, _Gy, _r )
oid_secp256k1 = (1,3,132,0,10)
SECP256k1 = ecdsa.curves.Curve("SECP256k1", curve_secp256k1, generator_secp256k1, oid_secp256k1 ) 

# support functions - formatting and conversion 

alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'

def b58encode(addr):
    global alphabet 
    long_value = 0L
    for (i, c) in enumerate(addr[::-1]):
        long_value += (256**i) * ord(c)

    result = ''
    while long_value >= 58:
        div, mod = divmod(long_value, 58)
        result = alphabet[mod] + result
        long_value = div
    result = alphabet[long_value] + result

    nPad = 0
    for c in addr:
        if c == '\0': nPad += 1
        else: break

    return (alphabet[0]*nPad) + result

def public_key_to_address(public_key):
    vh160 = chr(0) + ripemd160( sha256( public_key ))
    hash = sha256(sha256( vh160 ))
    return b58encode( vh160 + hash[0:4] )

def sha256(msg):
    return hashlib.sha256(msg).digest()
    
def ripemd160(msg):
    md = hashlib.new('ripemd160')
    md.update( msg )
    return md.digest()
        
def b58hex(s58):
	num = 0L
	for (i, c) in enumerate(s58[::-1]):
		num += alphabet.find(c) * (58**i)
	return hex(num)[4:-9].upper()

for pos in range(len(priv_key_wif)-1):
	print "scanning digit", pos+1
	for c in alphabet:
		priv_key_chk = list(priv_key_wif)
		priv_key_chk[pos+1] = c
		priv_key = "".join(priv_key_chk)
		pub_key = chr(4) + ecdsa.SigningKey.from_secret_exponent(long(b58hex(priv_key), 16), curve=SECP256k1 ).get_verifying_key().to_string()
		if public_key_to_address(pub_key) == target_addr:
			print priv_key
			exit(0)



