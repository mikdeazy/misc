#!/usr/bin/env python
#
# Electrum password scanner (multi-processing)
#

import sys, time, base64, hashlib, multiprocessing
from Crypto.Cipher import AES

wildchar = '?'
pwd_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"

def sha256(x):
    return hashlib.sha256(x).digest()
    
def scanproc(pwd):
    if pwd.count(wildchar) < 2:
        scanonce(pwd)
    else:
        p = pwd.find(wildchar)
        for c in pwd_chars:
            scanonce(pwd[:p]+c+pwd[p+1:])

def scanonce(pwd):
    p = pwd.find(wildchar)
    for c in pwd_chars:
        try:
            the_xprv = AES.new(sha256(sha256(pwd[:p]+c+pwd[p+1:])), AES.MODE_CBC, xprv[:16]).decrypt(xprv[16:]).decode("utf8")
        except Exception:
            pass
        else:
            if the_xprv != "":
                print "\nPWD:", pwd[:p]+c+pwd[p+1:]
                print "XPRV:", the_xprv[:-ord(the_xprv[-1])]
                print "Took %.1f seconds" % (time.time() - started,)
                sys.exit(2)
    
def pwd_subst(pwd):
    global done, procs
    if len(procs) == max_procs:
        for p in procs:
            p.join()
            if p.exitcode == 2:
                done = True
        procs = []
    if not done:
        if pwd.count(wildchar) <= 2:
            sys.stdout.flush()
            proc = multiprocessing.Process(target = scanproc, args = (pwd,))
            procs.append(proc)
            proc.start()
        else:
            p = pwd.find(wildchar)
            for c in pwd_chars:
                pwd_subst(pwd[:p]+c+pwd[p+1:])


if __name__ == '__main__':
    
    max_procs = multiprocessing.cpu_count()
    procs = []
    done = False
    
    if len(sys.argv) < 3:
        print "Electrum wallet password scanner (multiprocessing)"
        print "Template char is: %s" % wildchar
        print "Char set is: %s" % pwd_chars
        print "Example template: myPwd%s%s123" % (wildchar,wildchar)
        print "@ prefix means load templates (one per line) from file and scan each"
        print "If charset provided then first char position is template char"  
        print "Usage: %s <pwd template> <xprv from wallet file> [charset]\n" % sys.argv[0]
        sys.exit(0)
        
    if sys.argv[1][0] != '@' and sys.argv[1].count(wildchar) == 0:
        print "Need at least one %s in template" % wildchar
        sys.exit(0)
        
    if len(sys.argv) > 3:
        wildchar = sys.argv[3][0]
        pwd_chars = sys.argv[3][1:]
        
    xprv = base64.b64decode(sys.argv[2])
    started = time.time()
    if sys.argv[1][0] != '@':
        pwd_subst(sys.argv[1])
    else:
        tmps = [ line.rstrip('\n') for line in open(sys.argv[1][1:]) ]
        for t in tmps:
            print "Checking", t
            pwd_subst(t)
    
    for p in procs:
        p.join()
        if p.exitcode == 2:
            done = True
                            
    if not done:
        print "Password not found"


    




