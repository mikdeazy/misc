#!/usr/bin/env python
#
# Electrum password scanner
#

import sys, time, base64, hashlib
from Crypto.Cipher import AES

wildchar = '?'
pwd_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"

def sha256(x):
    return hashlib.sha256(x).digest()

def pwd_subst(pwd):
    if pwd.count(wildchar) == 1:
        p = pwd.find(wildchar)
        for c in pwd_chars:
            try:
                the_xprv = AES.new(sha256(sha256(pwd[:p]+c+pwd[p+1:])), AES.MODE_CBC, xprv[:16]).decrypt(xprv[16:32]).decode("utf8")
            except Exception:
                pass
            else:
                if the_xprv[:4] == "xprv":
                    print "\nPWD:", pwd[:p]+c+pwd[p+1:]
                    the_xprv = AES.new(sha256(sha256(pwd[:p]+c+pwd[p+1:])), AES.MODE_CBC, xprv[:16]).decrypt(xprv[16:]).decode("utf8")
                    print "XPRV:", the_xprv[:-ord(the_xprv[-1])]
                    print "Took %.1f seconds" % (time.time() - started,)
                    sys.exit(0)
    else:
        p = pwd.find(wildchar)
        for c in pwd_chars:
            pwd_subst(pwd[:p]+c+pwd[p+1:])
    
if len(sys.argv) < 3:
    print "Electrum wallet password scanner"
    print "Template char is: %s" % wildchar
    print "Char set is: %s" % pwd_chars
    print "Example template: myPwd%s%s123" % (wildchar,wildchar)
    print "@ prefix means load templates (one per line) from file and scan each"
    print "If charset provided then first char position is template char"
    print "Usage: %s <pwd template> <xprv from wallet file> [charset]\n" % sys.argv[0]
    sys.exit(0)
    
if sys.argv[1][0] != '@' and sys.argv[1].count(wildchar) == 0:
    print "Need at least one %s in template" % wildchar
    sys.exit(0)
    
if len(sys.argv) > 3:
    wildchar = sys.argv[3][0]
    pwd_chars = sys.argv[3][1:]

xprv = base64.b64decode(sys.argv[2])
started = time.time()
if sys.argv[1][0] != '@':
    pwd_subst(sys.argv[1])
else:
    tmps = [ line.rstrip('\n') for line in open(sys.argv[1][1:]) ]
    for t in tmps:
        print "Checking", t
        pwd_subst(t)

print "Password not found"


    




