 Read a private key from stdin and output formatted data values.
 Input one key per line either hex (64 chars) or WIF (base58 chars),
 or BIP38 format.
 
 **Usage: keyfmt [-c] <format> [bip38pwd]**
 
 optional: -c indicates to output compressed keys/addrs

 The format argument can contain variables:

 %h = HEX privkey
 %w = WIF privkey
 %e = BIP38 encrypted key
 %p = public key
 %a = address

 eg. "Address: %a\nPrivkey: %w" outputs a format like the vanitygen program
     "a:%w" outputs a format good for importing to Electrum
 
 This generates a new key for importing to Electrum:

     od -An -N32 -xw32 /dev/random | keyfmt "%a:%w"

 This generates a brain wallet compatible with bitaddress.org:

     echo -n "this is my brain on drugs"|openssl sha256|cut -c 10-|keyfmt %a:%w

 This generates a new BIP38 encrypted key and address:

     hexdump -v -e '/1 "%02X"' -n 32 /dev/urandom | keyfmt "%e\n%a" test123

 Or a BIP38 key from rolled casino dice:
 
     echo -n 12342325436231425342643524|openssl sha256|cut -c 10-|keyfmt "%e\n%a" test123
