#!/usr/bin/env python
#
# Generate an address from a given MPK and a sequence number.
#

import sys, ecdsa, hashlib, binascii

if len(sys.argv) < 3:
	print "Usage: %s <MPK> <SeqNum>\n\nGenerate a Bitcoin address from an Electrum master public key (MPK).\n" % sys.argv[0]
	print "MPK is from Electrum wallet, SeqNum is an increasing 0-based index value for each address."
	sys.exit(1)

def public_key_to_address(public_key):
    md = hashlib.new('ripemd160')
    md.update(hashlib.sha256( public_key ).digest())
    vh160 = chr(0) + md.digest()
    h = hashlib.sha256(hashlib.sha256( vh160 ).digest()).digest()
    addr = vh160 + h[0:4]
    
    alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
    long_value = 0L
    for (i, c) in enumerate(addr[::-1]):
        long_value += (256**i) * ord(c)

    result = ''
    while long_value >= 58:
        div, mod = divmod(long_value, 58)
        result = alphabet[mod] + result
        long_value = div
    result = alphabet[long_value] + result

    nPad = 0
    for c in addr:
        if c == '\0': nPad += 1
        else: break

    return (alphabet[0]*nPad) + result

# secp256k1, http://www.oid-info.com/get/1.3.132.0.10
_p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2FL
_r = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141L
_b = 0x0000000000000000000000000000000000000000000000000000000000000007L
_a = 0x0000000000000000000000000000000000000000000000000000000000000000L
_Gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798L
_Gy = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8L
curve_secp256k1 = ecdsa.ellipticcurve.CurveFp( _p, _a, _b )
generator_secp256k1 = ecdsa.ellipticcurve.Point( curve_secp256k1, _Gx, _Gy, _r )
oid_secp256k1 = (1,3,132,0,10)
SECP256k1 = ecdsa.curves.Curve("SECP256k1", curve_secp256k1, generator_secp256k1, oid_secp256k1 ) 

mpk = sys.argv[1].decode('hex')
seq = int(sys.argv[2])
for_change = 0

z = ecdsa.util.string_to_number( hashlib.sha256(hashlib.sha256( "%d:%d:" % (seq,for_change) + mpk ).digest()).digest() )
master_public_key = ecdsa.VerifyingKey.from_string( mpk, curve = SECP256k1 )
public_key = ecdsa.VerifyingKey.from_public_point( master_public_key.pubkey.point + z*SECP256k1.generator, curve = SECP256k1 )
print public_key_to_address( '04'.decode('hex') + public_key.to_string() )


   
